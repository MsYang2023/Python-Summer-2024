import random

# Step 2: Print the Board (print_board)
# Function to print the Tic-Tac-Toe board
def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("--" * 5)

# Step 3: Check for Winner (check_winner)
# Function to check for a winner
def check_winner(board, player):
    # Check rows, columns, and diagonals
    for row in board:
        if all(s == player for s in row):
            return True
    for col in range(3):
        if all(row[col] == player for row in board):
            return True
    if all(board[i][i] == player for i in range(3)) or all(board[i][2-i] == player for i in range(3)):
        return True
    return False

# Step 4: Check if Board is Full (is_full)
# Function to check if the board is full
def is_full(board):
    for row in board:
        for cell in row:
            if cell == " ":
                return False
    return True

# Step 5: Get Available Moves (available_moves)
# Function to get available moves
def available_moves(board):
    moves = []
    for i in range(3):
        for j in range(3):
            if board[i][j] == " ":
                moves.append((i, j))
    return moves

# Step 6: Implement Minimax Algorithm (minimax)
# Minimax algorithm
def minimax(board, depth, is_maximizing):
    if check_winner(board, "O"):
        return -1
    if check_winner(board, "X"):
        return 1
    if is_full(board):
        return 0

    if is_maximizing:
        best_score = -float("inf")
        for move in available_moves(board):
            board[move[0]][move[1]] = "X"
            score = minimax(board, depth + 1, False)
            board[move[0]][move[1]] = " "
            best_score = max(score, best_score)
        return best_score
    else:
        best_score = float("inf")
        for move in available_moves(board):
            board[move[0]][move[1]] = "O"
            score = minimax(board, depth + 1, True)
            board[move[0]][move[1]] = " "
            best_score = min(score, best_score)
        return best_score

# Step 7: Find Best Move (find_best_move)
# Function to find the best move
def find_best_move(board):
    best_score = -float("inf")
    best_move = None
    for move in available_moves(board):
        board[move[0]][move[1]] = "X"
        score = minimax(board, 0, False)
        board[move[0]][move[1]] = " "
        if score > best_score:
            best_score = score
            best_move = move
    return best_move

# Step 1 & 8: Setup and Play the Game (play_game)
# Main function to play the game
def play_game():
    board = [[" " for _ in range(3)] for _ in range(3)]
    current_player = "O"

    while True:
        print_board(board)

        if current_player == "O":
            row = int(input("Enter the row (0-2): "))
            col = int(input("Enter the column (0-2): "))
            if board[row][col] == " ":
                board[row][col] = "O"
                if check_winner(board, "O"):
                    print_board(board)
                    print("O wins!")
                    break
                current_player = "X"
            else:
                print("Invalid move. Try again.")
        else:
            move = find_best_move(board)
            if move:
                board[move[0]][move[1]] = "X"
                if check_winner(board, "X"):
                    print_board(board)
                    print("X wins!")
                    break
                current_player = "O"

        if is_full(board):
            print_board(board)
            print("It's a draw!")
            break

if __name__ == "__main__":
    play_game()
